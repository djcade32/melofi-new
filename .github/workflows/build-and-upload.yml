name: Build and Upload Desktop Installers

on:
  #push:
  # branches:
  #   - main
  # tags:
  #   - 'v*.*.*'  # Matches version tags like v2.0.0
  pull_request:
    branches:
      - develop
    types:
      - opened
      - synchronize

jobs:
  #   build-mac:
  #     runs-on: macos-latest # macOS required to build .dmg
  #     steps:
  #       - name: Checkout repository
  #         uses: actions/checkout@v3

  #       - name: Set up Node.js
  #         uses: actions/setup-node@v4
  #         with:
  #           node-version: 20

  #       - name: Install dependencies
  #         run: npm ci

  #       - name: Build Next.js frontend
  #         run: npm run build

  #       - name: Build Electron app
  #         run: npm run build:desktop

  #       - name: Install rclone
  #         run: |
  #           brew install rclone

  #       - name: Write rclone config from secret
  #         run: |
  #           mkdir -p "$HOME/.config/rclone"
  #           echo "${{ secrets.RCLONE_CONF }}" > "$HOME/.config/rclone/rclone.conf"

  #       - name: List rclone remotes
  #         run: rclone --config=$HOME/.config/rclone/rclone.conf listremotes

  #       - name: Upload .dmg to R2 (macOS)
  #         run: |
  #           VERSION=$(node -p "require('./package.json').version")
  #           FILE="./dist/Melofi-$VERSION-arm64.dmg"
  #           echo "Uploading $FILE to melofi-r2..."
  #           rclone --config="$HOME/.config/rclone/rclone.conf" copy "$FILE" "melofi-r2:melofi-installs/mac" --s3-acl public-read
  #           echo "Uploaded $FILE to melofi-r2"

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js frontend
        run: npm run build

      - name: Build Electron app
        run: npm run build:desktop

      - name: Rename installer and uninstaller, zip them
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")

          INSTALLER="dist/Melofi Setup ${VERSION}.exe"
          UNINSTALLER="dist/__uninstaller-nsis-melofi-new.exe"

          RENAMED_INSTALLER="Melofi-${VERSION}.exe"
          RENAMED_UNINSTALLER="Melofi-Uninstaller-${VERSION}.exe"

          mv "$INSTALLER" "dist/$RENAMED_INSTALLER"
          mv "$UNINSTALLER" "dist/$RENAMED_UNINSTALLER"

          cd dist
          zip "Melofi-Windows-${VERSION}.zip" "$RENAMED_INSTALLER" "$RENAMED_UNINSTALLER"

      - name: Install rclone
        run: choco install rclone -y

      - name: Write rclone config from secret
        shell: bash
        run: |
          mkdir -p "$HOME/.config/rclone"
          echo "${{ secrets.RCLONE_CONF }}" > "$HOME/.config/rclone/rclone.conf"

      - name: Upload zipped installer to R2 (Windows)
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          ZIP_FILE="dist/Melofi-Windows-${VERSION}.zip"

          echo "Uploading $ZIP_FILE to melofi-r2..."
          rclone --config="$HOME/.config/rclone/rclone.conf" copy "$ZIP_FILE" "melofi-r2:melofi-installs/windows" --s3-acl public-read
          echo "Uploaded $ZIP_FILE to melofi-r2"
